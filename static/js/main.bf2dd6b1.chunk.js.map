{"version":3,"sources":["components/Layout.js","components/AddToDo.js","components/ToDoListItem.js","components/ToDoList.js","index.js","custom-hooks.js"],"names":["Layout","memo","props","Paper","elevation","style","padding","margin","backgroundColor","AppBar","color","position","height","Toolbar","Typography","children","AddTodo","Grid","container","xs","md","item","paddingRight","TextField","placeholder","value","inputValue","onChange","onInputChange","onKeyPress","onInputKeyPress","fullWidth","Button","variant","onClick","onButtonClick","TodoListItem","ListItem","divider","Checkbox","onCheckBoxToggle","checked","disableRipple","ListItemText","primary","text","ListItemSecondaryAction","IconButton","aria-label","TodoList","items","length","List","overflow","map","todo","idx","ToDoListItem","key","onItemRemove","onItemCheck","ToDoApp","initialValue","useState","setInputValue","changeInput","event","target","clearInput","keyInput","callback","which","keyCode","useInputValue","todos","setTodos","addTodo","concat","checkTodo","index","removeTodo","filter","useTodos","clearInputAndAddTodo","_","ToDoList","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.bf2dd6b1.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport { AppBar, Toolbar, Typography, Paper } from \"@material-ui/core\";\r\n\r\nconst Layout = memo(props => (\r\n  <Paper\r\n    elevation={0}\r\n    style={{ padding: 0, margin: 0, backgroundColor: \"#fafafa\" }}\r\n  >\r\n    <AppBar color=\"primary\" position=\"static\" style={{ height: 64 }}>\r\n      <Toolbar style={{ height: 64 }}>\r\n        <Typography color=\"inherit\">TODO APP</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n    {props.children}\r\n  </Paper>\r\n));\r\n\r\nexport default Layout;\r\n","import React, { memo } from \"react\";\r\nimport { TextField, Paper, Button, Grid } from \"@material-ui/core\";\r\n\r\nconst AddTodo = memo(props => (\r\n  <Paper style={{ margin: 16, padding: 16 }}>\r\n    <Grid container>\r\n      <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\r\n        <TextField\r\n          placeholder=\"Add Todo here\"\r\n          value={props.inputValue}\r\n          onChange={props.onInputChange}\r\n          onKeyPress={props.onInputKeyPress}\r\n          fullWidth\r\n        />\r\n      </Grid>\r\n      <Grid xs={2} md={1} item>\r\n        <Button\r\n          fullWidth\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n          onClick={props.onButtonClick}\r\n        >\r\n          Add\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  </Paper>\r\n));\r\n\r\nexport default AddTodo;\r\n","import React, { memo } from \"react\";\r\n\r\nimport {\r\n  List,\r\n  ListItem,\r\n  Checkbox,\r\n  IconButton,\r\n  ListItemText,\r\n  ListItemSecondaryAction\r\n} from \"@material-ui/core\";\r\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\r\n\r\nconst TodoListItem = memo(props => (\r\n  <ListItem divider={props.divider}>\r\n    <Checkbox\r\n      onClick={props.onCheckBoxToggle}\r\n      checked={props.checked}\r\n      disableRipple\r\n    />\r\n    <ListItemText primary={props.text} />\r\n    <ListItemSecondaryAction>\r\n      <IconButton aria-label=\"Delete Todo\" onClick={props.onButtonClick}>\r\n        <DeleteOutlined />\r\n      </IconButton>\r\n    </ListItemSecondaryAction>\r\n  </ListItem>\r\n));\r\n\r\nexport default TodoListItem;\r\n","import React, { memo } from \"react\";\r\nimport { List, Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport ToDoListItem from \"./ToDoListItem\";\r\n\r\nconst TodoList = memo(props => (\r\n  <>\r\n    {props.items.length > 0 && (\r\n      <Paper style={{ margin: 16 }}>\r\n        <List style={{ overflow: \"scroll\" }}>\r\n          {props.items.map((todo, idx) => (\r\n            <ToDoListItem\r\n              {...todo}\r\n              key={`TodoItem.${idx}`}\r\n              divider={idx !== props.items.length - 1}\r\n              onButtonClick={() => props.onItemRemove(idx)}\r\n              onCheckBoxToggle={() => props.onItemCheck(idx)}\r\n            />\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    )}\r\n  </>\r\n));\r\n\r\nexport default TodoList;\r\n","import \"./style.css\";\n\nimport React, { memo } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { useInputValue, useTodos } from \"./custom-hooks\";\nimport Layout from \"./components/Layout\";\nimport AddTodo from \"./components/AddToDo\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst ToDoApp = memo(props => {\n  const { inputValue, changeInput, clearInput, keyInput } = useInputValue();\n  const { todos, addTodo, checkTodo, removeTodo } = useTodos();\n\n  const clearInputAndAddTodo = _ => {\n    clearInput();\n    addTodo(inputValue);\n  };\n\n  return (\n    <Layout>\n      <AddTodo\n        inputValue={inputValue}\n        onInputChange={changeInput}\n        onButtonClick={clearInputAndAddTodo}\n        onInputKeyPress={event => keyInput(event, clearInputAndAddTodo)}\n      />\n      <ToDoList\n        items={todos}\n        onItemCheck={idx => checkTodo(idx)}\n        onItemRemove={idx => removeTodo(idx)}\n      />\n    </Layout>\n  );\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ToDoApp />, rootElement);\n","import { useState } from \"react\";\r\n\r\nexport const useInputValue = (initialValue = \"\") => {\r\n  const [inputValue, setInputValue] = useState(initialValue);\r\n\r\n  return {\r\n    inputValue,\r\n    changeInput: event => setInputValue(event.target.value),\r\n    clearInput: () => setInputValue(\"\"),\r\n    keyInput: (event, callback) => {\r\n      if (event.which === 13 || event.keyCode === 13) {\r\n        callback(inputValue);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  };\r\n};\r\n\r\nexport const useTodos = (initialValue = []) => {\r\n  const [todos, setTodos] = useState(initialValue);\r\n\r\n  return {\r\n    todos,\r\n    addTodo: text => {\r\n      if (text !== \"\") {\r\n        setTodos(\r\n          todos.concat({\r\n            text,\r\n            checked: false\r\n          })\r\n        );\r\n      }\r\n    },\r\n    checkTodo: idx => {\r\n      setTodos(\r\n        todos.map((todo, index) => {\r\n          if (idx === index) {\r\n            todo.checked = !todo.checked;\r\n          }\r\n\r\n          return todo;\r\n        })\r\n      );\r\n    },\r\n    removeTodo: idx => {\r\n      setTodos(todos.filter((todo, index) => idx !== index));\r\n    }\r\n  };\r\n};\r\n"],"sourceRoot":""}